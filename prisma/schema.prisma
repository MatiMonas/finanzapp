generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id       String      @id @default(uuid()) @db.Char(36)
  email    String      @unique @db.VarChar(30)
  username String      @unique @db.VarChar(25)
  password String      @db.VarChar(255)
  roles    UserRoles[] @relation("user_roles")

  active_budget_configuration_id Int?                   @db.UnsignedInt
  active_budget_configuration    BudgetsConfigurations? @relation(name: "user_active_budget_configuration", fields: [active_budget_configuration_id], references: [id])

  budgets                Budgets[]
  budgets_configurations BudgetsConfigurations[]

  wages                Wages[]
  monthly_wage_summary MonthlyWageSummary[]
  // UserBalance                 UserBalance?
  // expenses                    Expenses[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("users")
}

// model UserBalance {
//   id      Int    @id @default(autoincrement()) @db.UnsignedInt
//   total   Int    @default(0)
//   user    Users  @relation(fields: [user_id], references: [id])
//   user_id String @unique

//   created_at DateTime  @default(now())
//   updated_at DateTime  @updatedAt
//   deleted_at DateTime?
// }

model Roles {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  name String @db.VarChar(10)

  users UserRoles[] @relation("user_roles")

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("roles")
}

model UserRoles {
  user_id String @db.Char(36)
  role_id Int    @db.UnsignedInt

  user Users @relation("user_roles", fields: [user_id], references: [id])
  role Roles @relation("user_roles", fields: [role_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@id([user_id, role_id])
  @@map("user_roles")
}

model BudgetsConfigurations {
  id           Int     @id @default(autoincrement()) @db.UnsignedInt
  name         String
  user_id      String
  is_public    Boolean @default(false)
  active_users Users[] @relation("user_active_budget_configuration")

  budgets Budgets[]
  users   Users[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([user_id], name: "idx_budget_configs_user_id")
  @@map("budgets_configuration")
}

// This table will be used to store a particular wage containing user + amount and we will relate add it to the monthlyWageSummary refering to the month and year
model Wages {
  id Int @id @default(autoincrement()) @db.UnsignedInt

  amount         Float  @default(0.0) @db.Float
  exchange_rate  Float // USD if currency is ARS, ARS if currency is USD
  currency       String
  month_and_year String

  user_id String @db.Char(36)
  user    Users  @relation(fields: [user_id], references: [id])

  monthly_wage_summary_id Int                @db.UnsignedInt
  monthly_wage_summary    MonthlyWageSummary @relation(fields: [monthly_wage_summary_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("wages")
}

// Total wage of the month+year of the user that will be used to store the total amount of the wage where we will be discounting the expenses and calculating
// budgets numbers.

model MonthlyWageSummary {
  id             Int    @id @default(autoincrement()) @db.UnsignedInt
  user_id        String @db.Char(36)
  user           Users  @relation(fields: [user_id], references: [id])
  month_and_year String
  total_wage     Float
  remaining      Float

  budgets Budgets[]
  wages   Wages[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([user_id, month_and_year], name: "user_month_year_summary_idx")
  @@map("monthly_wage_summary")
}

model Budgets {
  id                   Int    @id @default(autoincrement()) @db.UnsignedInt
  user_id              String @db.Char(36)
  user                 Users  @relation(fields: [user_id], references: [id])
  name                 String @db.VarChar(30)
  percentage           Float  @default(0.0) @db.Float
  remaining_allocation Float  @default(0.0) @db.Float

  budget_configuration    BudgetsConfigurations? @relation(fields: [budget_configuration_id], references: [id])
  budget_configuration_id Int?                   @db.UnsignedInt

  monthly_wage_summary_id Int?                @db.UnsignedInt
  monthly_wage_summary    MonthlyWageSummary? @relation(fields: [monthly_wage_summary_id], references: [id])

  // categories              Categories[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([user_id], name: "idx_budgets_user_id")
  @@index([budget_configuration_id], name: "idx_budgets_budget_config_id")
  @@map("budgets")
}

// model Categories {
//   id         Int        @id @default(autoincrement()) @db.UnsignedInt
//   name       String     @db.VarChar(50)
//   budget_id  Int        @db.UnsignedInt
//   budget     Budgets    @relation(fields: [budget_id], references: [id])
//   expenses   Expenses[]
//   created_at DateTime   @default(now())
//   updated_at DateTime   @updatedAt
//   deleted_at DateTime?

//   @@index([budget_id], name: "idx_categories_budget_id")
//   @@map("categories")
// }

// model Expenses {
//   id          Int        @id @default(autoincrement()) @db.UnsignedInt
//   user_id     String     @db.Char(36)
//   user        Users      @relation(fields: [user_id], references: [id])
//   category_id Int        @db.UnsignedInt
//   category    Categories @relation(fields: [category_id], references: [id])
//   title       String     @db.VarChar(100)
//   amount      Float      @default(0.0) @db.Float
//   date        DateTime   @default(now())
//   is_monthly  Boolean    @default(false)
//   created_at  DateTime   @default(now())
//   updated_at  DateTime   @updatedAt
//   deleted_at  DateTime?

//   @@index([user_id, category_id], name: "idx_expenses_user_category")
//   @@index([date], name: "idx_expenses_date")
//   @@map("expenses")
// }
