generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                             String                  @id @default(uuid()) @db.Char(36)
  email                          String                  @unique @db.VarChar(30)
  username                       String                  @unique @db.VarChar(25)
  password                       String                  @db.VarChar(255)
  roles                          UserRoles[]             @relation("UserRolesToRoles")
  active_budget_configuration_id Int?                    @db.UnsignedInt
  active_budget_configuration    BudgetsConfigurations?  @relation(name: "user_active_budget_configuration", fields: [active_budget_configuration_id], references: [id])
  Wages                          Wages[]
  Budgets                        Budgets[]
  Expenses                       Expenses[]
  Investments                    Investments[]
  Debts                          Debts[]
  CreditCards                    CreditCards[]
  BudgetsConfigurations          BudgetsConfigurations[]
  created_at                     DateTime                @default(now())
  updated_at                     DateTime                @updatedAt
  deleted_at                     DateTime?

  @@map("users")
}

model Roles {
  id         Int         @id @default(autoincrement()) @db.UnsignedInt
  name       String      @db.VarChar(10)
  users      UserRoles[] @relation("UserRolesToRoles")
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?

  @@map("roles")
}

model UserRoles {
  user_id String @db.Char(36)
  role_id Int    @db.UnsignedInt
  user    Users  @relation("UserRolesToRoles", fields: [user_id], references: [id])
  role    Roles  @relation("UserRolesToRoles", fields: [role_id], references: [id])

  @@id([user_id, role_id])
  @@map("user_roles")
}

model BudgetsConfigurations {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  name         String
  budgets      Budgets[]
  user_id      String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?
  Users        Users[]
  is_public    Boolean   @default(false)
  active_users Users[]   @relation("user_active_budget_configuration")

  @@map("budgets_configuration")
}

model Wages {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id       String    @db.Char(36)
  user          Users     @relation(fields: [user_id], references: [id])
  amount        Float     @default(0.0) @db.Float
  date          DateTime
  exchange_rate Float // will be used to watch  variations on salary
  budgets       Budgets[] @relation("wages_budgets")
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?
  Budgets       Budgets[]

  @@map("wages")
}

model Budgets {
  id                   Int    @id @default(autoincrement()) @db.UnsignedInt
  user_id              String @db.Char(36)
  user                 Users  @relation(fields: [user_id], references: [id])
  name                 String @db.VarChar(30)
  percentage           Float  @default(0.0) @db.Float
  remaining_allocation Float  @default(0.0) @db.Float

  budget_configuration    BudgetsConfigurations? @relation(fields: [budget_configuration_id], references: [id])
  budget_configuration_id Int?                   @db.UnsignedInt

  wage_id Int?   @db.UnsignedInt
  wage    Wages? @relation("wages_budgets", fields: [wage_id], references: [id])

  categories Categories[]
  alerts     Alerts[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  deleted_at DateTime?
  Wages      Wages?       @relation(fields: [wagesId], references: [id])
  wagesId    Int?         @db.UnsignedInt

  @@map("budgets")
}

model Categories {
  id         Int        @id @default(autoincrement()) @db.UnsignedInt
  name       String     @db.VarChar(50)
  budget_id  Int        @db.UnsignedInt
  budget     Budgets    @relation(fields: [budget_id], references: [id])
  expenses   Expenses[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?

  @@map("categories")
}

model Alerts {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  budget_id  Int       @db.UnsignedInt
  budget     Budgets   @relation(fields: [budget_id], references: [id])
  threshold  Float     @db.Float
  color      String    @db.VarChar(10)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("alerts")
}

model Expenses {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  user_id     String     @db.Char(36)
  user        Users      @relation(fields: [user_id], references: [id])
  category_id Int        @db.UnsignedInt
  category    Categories @relation(fields: [category_id], references: [id])
  title       String     @db.VarChar(100)
  amount      Float      @default(0.0) @db.Float
  date        DateTime   @default(now())
  is_monthly  Boolean    @default(false)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at  DateTime?

  @@map("expenses")
}

model Investments {
  id             Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id        String    @db.Char(36)
  user           Users     @relation(fields: [user_id], references: [id])
  name           String    @db.VarChar(100)
  purchase_date  DateTime
  purchase_value Float     @default(0.0) @db.Float
  sale_date      DateTime?
  sale_value     Float?    @db.Float
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?

  @@map("investments")
}

model Debts {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id      String    @db.Char(36)
  user         Users     @relation(fields: [user_id], references: [id])
  creditor     String    @db.VarChar(100)
  amount       Float     @default(0.0) @db.Float
  due_date     DateTime
  is_paid      Boolean   @default(false)
  payment_date DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  @@map("debts")
}

model CreditCards {
  id            Int            @id @default(autoincrement()) @db.UnsignedInt
  user_id       String         @db.Char(36)
  user          Users          @relation(fields: [user_id], references: [id])
  name          String         @db.VarChar(50)
  total_credit  Float          @default(0.0) @db.Float
  total_debt    Float          @default(0.0) @db.Float
  card_expenses CardExpenses[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  deleted_at    DateTime?

  @@map("credit_cards")
}

model CardExpenses {
  id                     Int         @id @default(autoincrement()) @db.UnsignedInt
  credit_card_id         Int         @db.UnsignedInt
  credit_card            CreditCards @relation(fields: [credit_card_id], references: [id])
  title                  String      @db.VarChar(100)
  amount                 Float       @default(0.0) @db.Float
  start_date             DateTime
  end_date               DateTime
  installments           Int         @db.UnsignedInt
  remaining_installments Int         @db.UnsignedInt
  created_at             DateTime    @default(now())
  updated_at             DateTime    @updatedAt
  deleted_at             DateTime?

  @@map("card_expenses")
}
